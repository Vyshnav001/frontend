generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Payment {
  signature         String?
  status            PaymentStatus @default(PENDING)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  userId            String        @map("user_id")
  orderCreationId   String
  razorpayPaymentId String        @id
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("payments")
}

model Faculty {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events     Event[]  @relation("EventToFaculty")

  @@map("faculty")
}

model Student {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events     Event[]  @relation("EventToStudent")

  @@map("students")
}

model Event {
  id              String           @id @default(cuid())
  name            String
  description     String
  date            DateTime
  location        String
  image           String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  userId          String           @map("user_id")
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  faculties       Faculty[]        @relation("EventToFaculty")
  registeredUsers RegisteredUser[] @relation("EventToRegisteredUser")
  students        Student[]        @relation("EventToStudent")

  @@map("events")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  accounts       Account[]
  events         Event[]
  faculties      Faculty[]
  payment        Payment[]
  registeredUser RegisteredUser?
  sessions       Session[]
  students       Student[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model RegisteredUser {
  id         String   @id @default(cuid())
  userId     String   @unique @map("user_id")
  college    String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events     Event[]  @relation("EventToRegisteredUser")

  @@map("registeredusers")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
